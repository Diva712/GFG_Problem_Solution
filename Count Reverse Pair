You are given an array of N integers arr, find the count of reverse pairs. 

A pair of indices (i, j) is said to be a reverse pair if both the following conditions are met:

0 <= i < j < N 
arr[i] > 2 * arr[j]
Example 1:
Input:
N = 6
arr = [3, 2, 4, 5, 1, 20]
Output:
3
Explanation:
The Reverse pairs are 
(i)  (0, 4), arr[0] = 3, arr[4] = 1, 3 > 2(1) 
(ii) (2, 4), arr[2] = 4, arr[4] = 1, 4 > 2(1) 
(iii)(3, 4), arr[3] = 5, arr[4] = 1, 5 > 2(1) 
 

Example 2:

Input: 
N = 5
arr= [2, 4, 3, 5, 1]
Output: 
3
Explanation: 
(i)   (1, 4), arr[1] = 4, arr[4] = 1, 4 > 2 * 1
(ii)  (2, 4), arr[2] = 3, arr[4] = 1, 3 > 2 * 1
(iii) (3, 4), arr[3] = 5, arr[4] = 1, 5 > 2 * 1
 

Your Task:
Complete the function countRevPairs(), which takes integer a list of N integers as input and returns the count of Reverse Pairs.

Expected Time Complexity: O(N logN)
Expected Auxiliary Space: O(N)

#############
solution

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
#include <iostream>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int countRevPairs(int n, vector<int> arr) {
        // Code here
        return mergesort(arr , 0 , n-1);
    }
    int mergesort(vector<int>&arr , int low , int high){
        int a , mid;
        if(low>=high){
            return 0;
        }
        mid = (low+high)/2;
        a = mergesort(arr , low , mid);
        a+= mergesort(arr , mid+1 , high);
        a+= merge(arr , low , mid , high);
        return a;
    }
    
    int merge(vector<int>&arr , int low , int mid , int high){
        int cnt = 0;
        int j = mid+1;
        for(int i=low ; i<=mid ;  i++){
            while(j<=high && arr[i]>2LL*arr[j]){
                j++;
            }
            cnt+=(j-(mid+1));
        }
        
        vector<int>temp;
        int left = low;
        int right = mid+1;
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            else{
                temp.push_back(arr[right]);
                right++;
            }
        }
        
        while(left<=mid){
            temp.push_back(arr[left]);
            left++;
        }
        
        while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
        
        for(int i=low; i<=high; i++){
            arr[i] = temp[i-low];
        }
        return cnt;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> arr;

        for (int i = 0; i < n; ++i) {
            int x;
            cin >> x;
            arr.push_back(x);
        }

        Solution obj;
        cout << obj.countRevPairs(n, arr) << endl;
    }
    return 0;
}
// } Driver Code Ends
