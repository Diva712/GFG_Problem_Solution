Given a string S, Find all the possible subsequences of the String in lexicographically-sorted order.

Example 1:

Input : str = "abc"
Output: a ab abc ac b bc c
Explanation : There are 7 subsequences that 
can be formed from abc.
Example 2:

Input: str = "aa"
Output: a a aa
Explanation : There are 3 subsequences that 
can be formed from aa.
Your Task:
You don't need to read input or print anything. Your task is to complete the function AllPossibleStrings() which takes S as the input parameter and returns a list of all possible subsequences (non-empty) that can be formed from S in lexicographically-sorted order.

Expected Time Complexity: O(n*2n) where n is the length of the String
Expected Space Complexity: O(n * 2n)

############
solution
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
	public:
	    void function ( int indx , int n , vector<string>&vec , string s , string str){
	        if(indx == n){
	           str.pop_back();
	           return;
	        }
	        str.push_back(s[indx]);
	        vec.push_back(str);
	        function(indx+1 , n , vec , s , str);
	        str.pop_back();
	        function(indx+1 , n , vec , s , str);
	    }
		vector<string> AllPossibleStrings(string s){
		    // Code here
		    vector<string>vec;
		    string str = "";
		    function(0 , s.length() , vec , s , str);
		    sort(vec.begin() , vec.end());
		    return vec;
		}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		string s;
		cin >> s;
		Solution ob;
		vector<string> res = ob.AllPossibleStrings(s);
		for(auto i : res)
			cout << i <<" ";
		cout << "\n";

	}
	return 0;
}
// } Driver Code Ends
